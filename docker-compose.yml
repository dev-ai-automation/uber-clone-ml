version: '3.8'

services:
  app:
    build:
      context: .
      target: production
    ports:
      - "${APP_PORT:-8000}:8000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - ML_MODEL_PATH=/app/models
      - ENVIRONMENT=${ENVIRONMENT:-production}
    volumes:
      - models_data:/app/models
      - logs_data:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15-alpine
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    # Remove external port exposure for security
    expose:
      - "5432"
    restart: unless-stopped
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_pass} --appendonly yes
    env_file:
      - .env
    # Remove external port exposure for security
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_pass}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  celery_worker:
    build:
      context: .
      target: production
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=4
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT:-production}
    volumes:
      - models_data:/app/models
      - logs_data:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  celery_beat:
    build:
      context: .
      target: production
    command: celery -A app.core.celery_app beat --loglevel=info
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT:-production}
    volumes:
      - logs_data:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  flower:
    build:
      context: .
      target: production
    command: celery -A app.core.celery_app flower --port=5555 --basic_auth=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT:-production}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true

# Define secure network
networks:
  app-network:
    driver: bridge
    internal: false

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  models_data:
    driver: local
  logs_data:
    driver: local
